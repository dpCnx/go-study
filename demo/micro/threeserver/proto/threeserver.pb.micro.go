// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: threeserver.proto

package threeserver_proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for FileServer service

type FileServerService interface {
	GetFile(ctx context.Context, opts ...client.CallOption) (FileServer_GetFileService, error)
}

type fileServerService struct {
	c    client.Client
	name string
}

func NewFileServerService(name string, c client.Client) FileServerService {
	return &fileServerService{
		c:    c,
		name: name,
	}
}

func (c *fileServerService) GetFile(ctx context.Context, opts ...client.CallOption) (FileServer_GetFileService, error) {
	req := c.c.NewRequest(c.name, "FileServer.GetFile", &FileRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &fileServerServiceGetFile{stream}, nil
}

type FileServer_GetFileService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*FileRequest) error
}

type fileServerServiceGetFile struct {
	stream client.Stream
}

func (x *fileServerServiceGetFile) Close() error {
	return x.stream.Close()
}

func (x *fileServerServiceGetFile) Context() context.Context {
	return x.stream.Context()
}

func (x *fileServerServiceGetFile) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *fileServerServiceGetFile) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *fileServerServiceGetFile) Send(m *FileRequest) error {
	return x.stream.Send(m)
}

// Server API for FileServer service

type FileServerHandler interface {
	GetFile(context.Context, FileServer_GetFileStream) error
}

func RegisterFileServerHandler(s server.Server, hdlr FileServerHandler, opts ...server.HandlerOption) error {
	type fileServer interface {
		GetFile(ctx context.Context, stream server.Stream) error
	}
	type FileServer struct {
		fileServer
	}
	h := &fileServerHandler{hdlr}
	return s.Handle(s.NewHandler(&FileServer{h}, opts...))
}

type fileServerHandler struct {
	FileServerHandler
}

func (h *fileServerHandler) GetFile(ctx context.Context, stream server.Stream) error {
	return h.FileServerHandler.GetFile(ctx, &fileServerGetFileStream{stream})
}

type FileServer_GetFileStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*FileRequest, error)
}

type fileServerGetFileStream struct {
	stream server.Stream
}

func (x *fileServerGetFileStream) Close() error {
	return x.stream.Close()
}

func (x *fileServerGetFileStream) Context() context.Context {
	return x.stream.Context()
}

func (x *fileServerGetFileStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *fileServerGetFileStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *fileServerGetFileStream) Recv() (*FileRequest, error) {
	m := new(FileRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
